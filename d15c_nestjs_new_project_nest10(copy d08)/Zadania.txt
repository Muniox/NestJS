Prawdziwy sklep z prawdziwą bazą danych

- [Zrobione] Zainstaluj i skonfiguruj MySQL/MariaDB i Twój projekt w taki sposób, aby
  aplikacja sklepu była połączona z bazą danych.

- [Zrobione] Przerób sklep internetowy w ten sposób, aby wszystkie produkty znajdowały
  się w bazie danych. Pamiętaj o bezpiecznych ID tekstowych. Produkty możesz
  umieścić ręcznie w bazie danych. Przerób kod w ten sposób, aby dane faktycznie były
  używane z bazy.

- [Zrobione] Przerób całkowicie działanie koszyka. Wszystkie dane przechowywane w
  nim powinny być w bazie danych. Po restarcie komputera koszyk powinien
  zostać. Zakładamy na teraz, że każdy element do koszyka można dodać tylko raz.

- [Zrobione] Encje koszyka i produktów powinny ze sobą połączone. Koszyk może
  zawierać wiele przedmiotów. Pamiętaj, że przedmiot może być w wielu koszykach.

- [Zrobione] Koszyk powinien mieć możliwość usunięcia pojedynczych elementów - po ich ID.
  Jest także możliwość jednym endpointem całkowicie usunąć zawartość koszyka.

- [Zrobione] Pamiętaj o endpoint-cie z podsumowaniem.

- * Użytkownicy. Zadanie dodatkowe to zrobienie systemu użytkowników. Umożliw
  rejestrację - dodanie użytkownika. Przy dodawaniu towaru do koszyka wysyłaj
  również ID użytkownika o czyj koszyk chodzi. Każdy użytkownik ma własny koszyk.

- ** Administrator (nie ograniczamy tego, po prostu jest to osobny endpoint)
  ma dodatkowy endpoint, gdzie pobiera wszystkie koszyki, użytkowników z nimi
  związanymi i produkty w środku.

- ***  Dodatkowy punkt sporządza również statystykę - średniej wartości koszyka
  i średniej wartości produktu w koszyku. Możesz skorzystać z funkcji
  agregującej SQL o nazwie AVG()


----QueryBuilder------
ActiveRecord:
----deprecated
import {getConnection} from "typeorm";
await getConnection().createQueryBuilder()
----nowy sposób
import {DataSource} from "typeorm";
private readonly dataSource: DataSource,
const count = await this.dataSource.createQueryBuilder()

----chyba działa dla data DataMaper stary sposób
DataMaper (repository):
repozytoriumEncji.createQueryBuilder("nazwaEncjiZMalejLitery")

.getOne() - pojedyncza encja
.getMany() - wiele encji
.getRawOne() - pojedynczy rezultat
.getRawMany() - wiele rezultatów

.orWhere() - aby dodać warunek LUB
.andWhere() - aby dodać warunek ORAZ

46:58