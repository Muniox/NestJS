(zrobione) 1. Stwórz nową aplikację Nestową.

(zrobione) 2. Stwórz kontroler shop.

(zrobione) 3. Stwórz akcję na GET /shop, która zwróci listę przedmiotów  - d dowolne rzeczy - ich nazwę, opis i cenę netto.

(zrobione) 4. Odpowiednio otypuj powyższą akcję.

(zrobione) 5. Stwórz service shop i przenieś działanie powyżej akcji do tego service-u. Pamiętaj o pełnym otypowaniu

(zrobione) 6. Stwórz kontroler basket i service basket. W service stwórz pustą tablicę jako pole, które będzie oznaczało koszyk użytkownika.

(poniżej zauważysz, że przy każdym przeładnowaniu Twojego back-endu, dane znikają - to zupełnie normalne. Właśnie dlatego dalej zapoznamy się z obsługą baz dancych na stałe)

(zrobione) 7. Stwórz akcję POST /basket, która przyjmuje body i nazwę i ilość.
- Pamiętaj o tym, żeby odpowiednio otypować dane oraz żeby cała logika działa się w service.
- Dodaj dany produkt do tablicy 
- Akcja ma zwracać obiekt {isSuccess: true, index: number}, gdzie index  to numer elementu w tablicy.
- Wyświetlaj w kosoli tablicę po dodaniu do niej elementu. Póki co dla testów.
- * Możesz dodac walidację - to zwsze dobry pomysł! Jeżeli name nie będzie stringiem lub count liczbą lub name 
będzie pust lub count mniejszy od 1 - to nie dodawaj elementu z zwróć {isSuccess: false}

8. Stwórz akcję Delete/basket/:index, która usuwa dany element z koszyka. Zwracaj {isSuccess: true}, jeżeli taki
  istnije i go usuń lub {isSuccess: false}, jeżeli nie.
- Wyświetlaj w konsoli tablicę po usunięciu z niej elementu. Póki co dla testów.

9. Zaimportuj w service basket - service shop. Stwórz w service shop metodę do sprawdzania czy prdukt o takiej 
  nazwie istnieje. Zmień akcję POST /basket tak, żeby przy próbie dodania nieistniejącego przedmiotu elementu zwracało {isSuccess: false}.

10. Dodaj akcję GET /basket, która zwraca zawartość koszyka.
- Usuń console.log z dodawania i usuwania elementu. To było dla testu, ale już możesz testować na GET /basket

11. Dodaj akcję GET /basket/total-price, która zwraca cenę brutto. Dodaj odpowiednią metodę do service-u shop,
  która pozwoli Ci pobrać cenę dla danego produktu. Pamiętaj, żeby pomnożyć przez 1,23 - żeby uzyskać cenę brutto.
- * W rzeczywistości na tym etapie musiałoby nastąpić ponowne sprawdzanie czy istnieje taki element do zakupu.
  Jeżeli nie ( np. w międzyczasie się skończył ) to powinien pojawić się stosowny błąd.
- ** Z punktu widzenia UX, najlepiej byłobyw takim przypadku zaproponować użytkownikowi alternatywny koszyk - bez rzeczy, których nie ma.